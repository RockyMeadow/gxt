#!/bin/bash
# Giap Tran <txgvnn@gmail.com>
# github.com/TxGVNN/gxt
GXTDIR=${GXTDIR:-"$HOME/.gxt"}
RC="$GXTDIR/gxtrc"
DIR_WORK=$(pwd -P)

if [ "${DEBUG:-0}" -eq 1 ]; then
    set -x
fi

_version(){
    echo -e 'What is this? \tgxt "Xnote Git" 2.0'
}

_help(){
    _version
    echo ""
    echo "Usage: gxt COMMAND [OPTIONS] [ARGS..]"
    echo ""
    echo "Commands are:"
    echo -e "\tnew \tNew or update note |edit|vi|"
    echo -e "\tadd \tAdd file to note"
    echo -e "\tsearch \tSearch note with name or content contain pattern |find|"
    echo -e "\tcat \tView note |cat|less|more|"
    echo -e "\tstat \tDisplay note status"
    echo -e "\tmv \tRename note |rename|"
    echo -e "\trm \tRemove notes |rm|delete|"
    echo -e "\texport \tExport note to file"
    echo -e "\tshare \tShare note vi termbin.com"
    echo -e "\tlist \tList all notes |ls|"
    echo -e "\tlog \tLog all or only note"
    echo -e "\tgit \tUse power of git"
    echo ""
    echo "Options are:"
    echo -e "\t-g,  --gpg       Encrypt notes with GnuPG"
    echo -e "\t-m,  --match     Search with match pattern"
    echo -e "\t     --termbin   Share via termbin"
    echo -e "\t-v,  --version   Show the version"
    echo -e "\t-h,  --help      Show this guide"
    exit
}

_bootstrap(){
    for opt in "$@"
    do
        if [[ "$opt" == [-]* ]]; then
            long='';
            case ${opt:1:1} in
                g)  GPG=0 ;;
                h)  HELP=0;;
                v)  VERSION=0;;
                c)  long="CATEGORY";;
                m)  MATCH=0; ;;
                -)
                    case ${opt:2} in
                        help) HELP=0;;
                        version) VERSION=0;;
                        category) long="CATEGORY";;
                        termbin) SHARE="TERMBIN";;
                    esac;;
            esac
        else
            if [ "$long" ]; then
                eval "$long"="$opt"
                unset long
            else
                commands+="$IFS$opt"
            fi
        fi
    done

    if [ "$VERSION" ]; then
        _version
        exit
    fi
    if [ "$HELP" ]; then
        _help
    fi
}

_gpg_encrypt(){
    local input="$1"
    local output="$2"
    if [ -z "$output" ]; then
        output="$(mktemp -u -t .gxt-XXXXXX)"
    fi
    gpg --yes --trust-model always --output "$output" --encrypt --recipient "$RECIPIENT" "$input"
}

_gpg_decrypt(){
    local input="$1"
    local output="$2"
    if [ -z "$output" ]; then
        output="$(mktemp -u -t .gxt-XXXXXX)"
    fi
    gpg --output "$output" --decrypt "$input"
}

_init(){
    # shellcheck disable=SC1090
    [ -f "$RC" ] && source "$RC"

    if [ ! -d "$GXTDIR/.git" ]; then
        git init "$GXTDIR" > /dev/null
    fi
}

_gpg_setup(){
    if [ ! "$SRC" ]; then
        echo "gxt gpg EMAIl|PUBKEYID"
        echo "Example:"
        echo " gxt gpg txgvnn@gmail.com"
        exit 1
    fi
    if ! which gpg>/dev/null; then
        echo "Please install gnupg tools first"
        exit 1
    fi
    echo "RECIPIENT=$SRC" > "$RC"
    echo "Please import the key by run: gpg --search-keys $SRC"
}

_edit(){
    msg="Update"
    if [ ! "$SRC" ]; then
        echo "gxt new NOTE [-g|--gpg]"
        echo "gxt vi NOTE [-g|--gpg]"
    fi

    if [ ! -f "$SRC" ]; then
        if [[ "$SRC" == *[/]* ]]; then
            dir=${SRC%/*}
            mkdir -p "$dir"
        fi
        msg="Add"
    fi

    if [ "$GPG" ]; then
        NEWTEMP="$(mktemp -u -t .gxt-XXXXXX)"
        if [ -f "$SRC" ]; then
            _gpg_decrypt "$SRC" "$NEWTEMP"
        fi
        TMP="$SRC"
        SRC="$NEWTEMP"
    fi
    if [ "$com" != "em" ]; then
        editor "$SRC"
    else
        emacs -nw "$SRC"
    fi
    if [ "$GPG" ]; then
        _gpg_encrypt "$SRC" "$TMP"
        SRC="$TMP"
    fi

    if [ -n "$(git status -s | awk '/\?\?/ || /M/')" ]; then
        git add "$SRC"
        git commit -m "${msg} ${SRC}" | head -n1
    fi
}

_add(){
    if [ ! "$SRC" ]; then
        echo "gxt add <file> NEW-NOTE [-g|--gpg]"
        exit 1
    fi
    if [ -f "$DEST" ]; then
        printf "Note has exist. Do you want override that (y/N)? "
        read -r override
        if [[ "$override" != "y" && "$override" != "Y" ]]; then
            exit 1
        fi
    fi

    notes=$DEST
    if [ -z "$notes" ]; then
        notes=${SRC##*/}
    fi
    #if need to create new directory
    if [[ "$DEST" == *[/]* ]]; then
        dir=${DEST%/*}
        mkdir -p "$dir"
    fi

    if [[ "$SRC" != /* ]]; then
        SRC="$DIR_WORK/$SRC"
    fi
    if [ "$GPG" ]; then
        TMP="$(mktemp -u -t .gxt-XXXXXX)"
        _gpg_encrypt "$SRC" "$TMP"
        SRC="$TMP"
    fi

    cp "$SRC" "$notes"

    if [ -n "$(git status -s | awk '/^\?\?/ || /^ M/')" ]; then
        git add "$notes"
        git commit -m "Add file $notes" | head -n1
    else
        printf 'Note "%s" was not changed' "$notes"
    fi

}

_view(){
    if [ ! "$SRC" ];then
        echo "gxt cat NOTE"
        echo "gxt less NOTE"
        echo "gxt more NOTE"
        exit 1
    fi
    if [ "$GPG" ]; then
        TMP="$(mktemp -u -t .gxt-XXXXXX)"
        _gpg_decrypt "$SRC" "$TMP"
        SRC="$TMP"
    fi
    case "$com" in
        less)
            less "$SRC"
            ;;
        more)
            more "$SRC"
            ;;
        *)
            cat "$SRC"
            ;;
    esac
}

_stat(){
    if [ ! "$SRC" ];then
        echo "gxt stat NOTE"
        exit 1
    fi
    stat "$2"
}

_list(){
    if [ -n "$SRC" ] && [ ! -d "$SRC" ]; then
        printf '"%s" is not category' "$SRC"
        exit 1
    fi
    echo "# CATEGORIES"
    find "./$SRC" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sed '/\.git/d'
    echo ""
    echo "# GLOBAL"
    find "./$SRC" -mindepth 1 -maxdepth 1 -type f -exec basename {} \;
}

_search(){
    if [ ! "$SRC" ]; then
        echo "gxt find [-c category] [-m|--match] NAME|PATTERN"
        exit 1
    fi
    dir='.'
    if [ "$CATEGORY" ]; then
        dir="$CATEGORY"
    fi
    if [ "$MATCH" ] ; then
        find "$dir"  -path ./.git -prune -o -type f -exec grep -ni --color=always "$SRC" /dev/null {} + | sed -e 's,\./,,'
    else
        find "$dir" -path ./.git -prune -o -type f -printf '%P\0'  | grep -zi --color=always "$SRC" | tr \\0 \\n
    fi

}

_log(){
    if [ ! "$SRC" ]; then
        git log --graph --decorate --pretty=oneline --abbrev-commit
    else
        git  log --graph --decorate --pretty=oneline --abbrev-commit -- "$SRC"
    fi
}

_share(){
    if [ ! "$SRC" ]; then
        echo "gxt share NOTE [-g|--gpg]"
        exit 1
    fi
    if [ "$GPG" ]; then
        TMP="$(mktemp -u -t .gxt-XXXXXX)"
        _gpg_encrypt "$SRC" "$TMP"
        SRC="$TMP"
    fi
    case "$SHARE" in
        "TERMBIN")
            <"$SRC" nc termbin.com 9999 ;;
        *)
            curl --upload-file "$SRC" https://transfer.sh
    esac

}

_move(){
    if [ ! "$SRC" ] && [ ! "$DEST" ] ;then
        echo "gxt mv OLD_NOTE NEW_NOTE"
        exit 1
    fi
    if [[ "$DEST" == *[/]* ]]; then
        dir=${DEST%/*}
        mkdir -p "$GXTDIR/$dir"
    fi
    mv "$SRC" "$DEST"
    if [ -n "$(git status -s | awk '/^ D/')" ]; then
        git add -u
        git add "$DEST"
        git commit -m "Rename $SRC -> $DEST" | head -n1
    fi

}

_remove(){
    if [ "$#" -eq 1 ];then
        echo "gxt rm NOTE..."
        exit 1
    fi
    item=""
    shift
    for note in "$@"
    do
        if [ -f "$note" ]; then
            rm -vrf "$note"
            item+="$note "
        else
            printf 'Not found %s\n' "$note"
        fi
    done

    if [ -n "$(git status -s | awk '/^ D/')" ]; then
        git add -u
        git commit -m "Delete $item" | head -n1
    fi

}

_export(){
    if [ ! "$SRC" ] && [ ! "$DEST" ] ;then
        echo "gxt export NOTE [PATH] [-g|--gpg]"
        exit 1
    fi

    path="$DIR_WORK"
    if [ "$DEST" ]; then
        path="$DEST"
    fi
    if [[ "$DEST" != /* ]]; then
        path="$DIR_WORK/$3"
    fi
    if [ "$GPG" ]; then
        TMP="$(mktemp -u -t .gxt-XXXXXX)"
        _gpg_encrypt "$SRC" "$TMP"
        SRC="$TMP"
    fi

    cp "$SRC" "$path" -ia

}

_git(){
    shift
    git "$@"
}

_main(){
    com="$1"
    SRC="$2"
    DEST="$3"
    case "$com" in
        new|vi|edit|em)
            _edit "$@"
            ;;

        add)
            _add "$@"
            ;;

        cat|less|more)
            _view "$@"
            ;;

        stat)
            _stat "$@"
            ;;

        list|ls)
            _list "$@"
            ;;

        find|search)
            _search "$@"
            ;;

        export)
            _export "$@"
            ;;

        share)
            _share "$@"
            ;;

        mv|rename)
            _move "$@"
            ;;

        rm|remove|delete)
            _remove "$@"
            ;;

        log)
            _log "$@"
            ;;

        gpg)
            _gpg_setup "$@"
            ;;

        git)
            _git "$@"
            ;;

        *)
            _help
            ;;
    esac
    # remove plaintext
    [ ! "$GPG" ] || rm /tmp/.gxt* -f
}

_init
IFS=$'\n'
# shellcheck disable=SC2046
_bootstrap $(printf "%q\n" "$@")
cd "$GXTDIR" || exit 1

#shellcheck disable=2086
_main $commands
